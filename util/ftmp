#!/usr/bin/env python3
import html.parser
import sys

import httpx


service = 'https://tmp.lily.flowers/'


class AliasExistsError(Exception):
    pass


class FileTooLargeError(Exception):
    pass


class BadAliasError(Exception):
    pass


class UnknownError(Exception):
    pass


class MessageParser(html.parser.HTMLParser):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.capture = 0
        self.message = None
        self.href = None

    def handle_starttag(self, tag, attrs):
        if self.capture:
            self.capture += 1

            if not self.href:
                for attr in attrs:
                    key, val = attr
                    if key.lower() == 'href':
                        self.href = val
        else:
            for attr in attrs:
                key, val = attr
                if key.lower() == 'id' and val.lower() == 'message':
                    self.capture = 1
                    self.message = ''

    def handle_endtag(self, tag):
        if self.capture:
            self.capture -= 1

    def handle_data(self, data):
        if self.capture:
            self.message += data


def upload(stream, alias=None, filename=None):
    parser = MessageParser()

    if filename is None:
        if stream is not sys.stdin.buffer:
            filename = stream.name
        else:
            filename = 'Unnamed'

    resp = httpx.post(service, files={
        'file': (filename, stream),
        'alias': (None, alias.encode('utf-8') if alias is not None else b''),
    })

    if resp.status_code == 413:
        raise FileTooLargeError()

    parser.feed(resp.text)

    if 'alias already exists' in parser.message.lower():
        raise AliasExistsError()
    if 'alias is not valid' in parser.message.lower():
        raise BadAliasError()
    if 'upload is too large' in parser.message.lower():
        raise FileTooLargeError()
    if 'success' not in parser.message.lower():
        raise UnknownError()

    return parser.href


if __name__ == '__main__':
    from argparse import ArgumentParser, FileType

    parser = ArgumentParser(description='upload files to the file drop service at {}'.format(service))
    parser.add_argument('-a', '--alias', dest='alias', help='alias to upload files under (random if omitted)')
    parser.add_argument('-f', '--filename', dest='filename', help='filename to use for upload (guessed if omitted)')
    parser.add_argument('file', nargs=None if sys.stdin.isatty() else '?', default=sys.stdin.buffer, type=FileType('rb'), help='file to upload (reads from stdin if omitted)')

    args = parser.parse_args()

    try:
        print('created at ' + upload(args.file, args.alias, args.filename))
    except AliasExistsError:
        print('ftmp: error: alias already exists', file=sys.stderr)
        sys.exit(3)
    except FileTooLargeError:
        print('ftmp: error: input file is too large', file=sys.stderr)
        sys.exit(4)
    except BadAliasError:
        print('ftmp: error: alias is invalid', file=sys.stderr)
        sys.exit(5)
    except UnknownError:
        print('ftmp: error: an unknown error occured', file=sys.stderr)
        sys.exit(1)
